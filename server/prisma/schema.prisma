// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//? antes de migrate 1. Obvio iniciar el XAMPP con mysql y apache, 2. Estar en este archivo, 3. cd ./server/
//? npx prisma migrate dev --name <name>
//* Prisma versión: 4.6.1 - 10/11 - Angular CLI 14.2.5

model Perfil {
  id          Int       @id
  descripcion String
  usuarios    Usuario[]
}

model Usuario {
  id            String               @id //* Corresponde  a la cédula
  nombre        String
  apellido1     String
  apellido2     String
  correo        String //* Email
  username      String @unique
  clave         String //* Contraseña, no sé si usará MD5
  telefono      String
  direccion     String? //* Opcional
  reservaciones Reservacion[]
  facturas      Factura_Encabezado[]
  pedidos       Pedido[]             @relation("Pedidos") //* Por parte del cliente
  encargos      Pedido[]             @relation("Encargos") //* Por parte del mesero
  Perfil        Perfil               @relation(fields: [idPerfil], references: [id])
  idPerfil      Int
  sucursales    Sucursal[]

  @@unique([correo, telefono], name: "Constraint_Correo_Telefono")
}

//* Deshabilitado 8/11/2022
//model MeseroOnSucursal {
//  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
//  idSucursal Int
//  Usuario    Usuario  @relation(fields: [idMesero], references: [id])
//  idMesero   String

//  @@id([idSucursal, idMesero])
//}

model Sucursal {
  id            Int           @id //* Nombre de la sursal
  codigo        String //? Pienso que debería tener código
  nombre        String //? Igualmente un nombre
  ubicacion     String
  capacidad     Int
  mesas         Mesa[]
  reservaciones Reservacion[]
  productos     Producto[]
  meseros       Usuario[]
  pedidos       Pedido[]

  @@unique([codigo, nombre])
}

model Mesa {
  id            Int           @id @default(autoincrement()) //* Identity
  codigo        String        @unique
  capacidad     Int
  estado        Boolean       @default(true) //* Habilitado o deshabilitado
  reservaciones Reservacion[]
  pedidos       Pedido[]

  Sucursal         Sucursal           @relation(fields: [idSucursal], references: [id])
  idSucursal       Int
  EstadoMesa       DisponibilidadMesa @relation(fields: [idDisponibilidad], references: [id])
  idDisponibilidad Int                @default(1)
}

model DisponibilidadMesa {
  id          Int    @id //* 1- Disponible, 2 - Reservada, 3 - ocupada (por gente en el local)...
  descripcion String
  mesas       Mesa[]
}

model Reservacion {
  id         Int      @id @default(autoincrement())
  fecha_hora DateTime @default(now())
  cantidad   Int
  mesas      Mesa[]
  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal Int
  Usuario    Usuario  @relation(fields: [idUsuario], references: [id])
  idUsuario  String //* (representa al cliente o quien lo cree)
}

//* Deshabilitado 16/11/2022
//model Reservacion_Mesa {
//Mesa          Mesa        @relation(fields: [idMesa], references: [id])
//idMesa        Int
//Reservacion   Reservacion @relation(fields: [idReservacion], references: [id])
//idReservacion Int
//cantidad      Int

//@@id([idMesa, idReservacion])
//}

model Categoria_Producto {
  id          Int        @id
  descripcion String     @unique
  productos   Producto[]
}

model Producto {
  id                 Int                @id @default(autoincrement())
  nombre             String
  descripcion        String //* Incluye los acompañamientos
  ingredientes       String? //* Opcional
  precio             Decimal
  imagen             String //* agrego esta columna por que es muy importante mostrar que se vende
  estado             Boolean            @default(true) //* Habilitado / Deshabilitado
  Categoria_Producto Categoria_Producto @relation(fields: [idCategoria], references: [id])
  idCategoria        Int
  detalles           Factura_Detalle[]
  pedidos            Pedido_Producto[]
  sucursales         Sucursal[]
}

//* Deshabilitado - 8/11/2022
// model Sucursal_Producto {
//  Producto   Producto? @relation(fields: [idProducto], references: [id])
//  idProducto Int
//  Sucursal   Sucursal? @relation(fields: [idSucursal], references: [id])
//  idSucursal Int

//  @@id([idProducto, idSucursal])
//} 

model TipoPago {
  id                 Int                         @id
  descripcion        String //* 1- Crédito, 2- Efectivo, 3- Otros, cheques no aceptados
  facturasEncabezado FacturaEncabezadoTipoPago[]
}

model TipoTarjeta {
  id          Int                  @id
  descripcion String               @unique //* 1- Visa, 2- MasterCard, 3- American Express, 4- JCB, 5- DISCOVER
  facturas    Factura_Encabezado[]
}

model Factura_Encabezado {
  id             Int                         @id @default(autoincrement())
  numero_tarjeta String? //* Opcional 
  TipoTarjeta    TipoTarjeta?                @relation(fields: [idTipoTarjeta], references: [id])
  idTipoTarjeta  Int? //* Opcional [PUEDE SER EFECTIVO]
  fecha          DateTime                    @default(now())
  estado         Boolean                     @default(false) //* Cancelada / pendiente
  detalles       Factura_Detalle[]
  tipoPagos      FacturaEncabezadoTipoPago[] //* Corresponde a la relación N:M con tipo de pago

  Usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario String
}

model Factura_Detalle {
  id            Int     @default(autoincrement())
  cantidad      Int
  precio        Decimal
  impuesto      Decimal
  total_detalle Decimal

  Factura_Encabezado   Factura_Encabezado @relation(fields: [idFactura_Encabezado], references: [id])
  idFactura_Encabezado Int
  Producto             Producto           @relation(fields: [idProducto], references: [id])
  idProducto           Int

  @@id([id, idFactura_Encabezado])
}

model FacturaEncabezadoTipoPago {
  Factura_Encabezado   Factura_Encabezado @relation(fields: [idFactura_Encabezado], references: [id])
  idFactura_Encabezado Int
  TipoPago             TipoPago           @relation(fields: [idTipoPago], references: [id])
  idTipoPago           Int
  monto                Decimal //* Corresponde al monto que se paga con el tipo de pago

  @@id([idFactura_Encabezado, idTipoPago])
}

//* Pedido = comanda, le cambiamos el nombre

model EstadoPedido {
  id          Int      @id //* Estado
  descripcion String //* Estados: 1- registrada, 2- en proceso, 3- pendiente, 4- entregada, 5- por pagar, 6- cancelada 
  pedidos     Pedido[]
}

model TipoPedido {
  id          Int      @id //* Tipos: 1- En Persona, 2- En línea
  descripcion String
  pedidos     Pedido[]
}

model Pedido {
  id           Int               @id @default(autoincrement())
  nombre       String?           @unique
  precio       Decimal           @default(0)
  fecha        DateTime          @default(now())
  detalles     Pedido_Producto[]
  EstadoPedido EstadoPedido      @relation(fields: [idEstado], references: [id])
  idEstado     Int @default(1) //? Default inicial para mesero

  Cliente   Usuario @relation(name: "Pedidos", fields: [idCliente], references: [id])
  idCliente String

  Mesero   Usuario? @relation(name: "Encargos", fields: [idMesero], references: [id])
  idMesero String? //* Ya que es la misma tabla y se utiliza doble llave fóran//? Pq no tiene detallesea con relación ambigua, se añade un campo para distinguir del id mesero y el id cliente

  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal Int //* Sucursal que se haga cargo

  Mesa   Mesa? @relation(fields: [idMesa], references: [id])
  idMesa Int? //* Es totalmente opcional, ya que puede ser que sea online...

  TipoPedido   TipoPedido @relation(fields: [idTipoPedido], references: [id])
  idTipoPedido Int @default(1) //* Indica si es en persona o de forma remota - No opcional
}

model Pedido_Producto {
  Pedido     Pedido   @relation(fields: [idPedido], references: [id])
  idPedido   Int
  Producto   Producto @relation(fields: [idProducto], references: [id])
  idProducto Int
  cantidad   Int      @default(1)
  notas      String

  @@id([idPedido, idProducto])
}
