// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//* En teoría ya está mapeado, solo falta cambiar unas cosas
//* Maes si pueden instalen la extensión better comments, simplemente añade varios colores

model Perfil {
  id          Int       @id
  descripcion String
  usuarios    Usuario[]
}

model Usuario {
  id            String               @id //* Corresponde  a la cédula
  nombre        String
  apellido1     String
  apellido2     String
  correo        String //* Email
  username      String
  clave         String //* Contraseña, no sé si usará MD5
  telefono      String
  direccion     String? //* Opcional
  reservaciones Reservacion[]
  facturas      Factura_Encabezado[]
  pedidos       Pedido[]
  Perfil        Perfil               @relation(fields: [idPerfil], references: [id])
  idPerfil      Int

  @@unique([correo, username, telefono])
}

model Mesero {
  id         String   @id //* Cédula
  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt
}

model Sucursal {
  id            BigInt              @id //* Nombre de la sursal
  codigo        String //? Pienso que debería tener código
  nombre        String //? Igualmente un nombre
  ubicacion     String
  capacidad     BigInt
  meseros       Mesero[]
  mesas         Mesa[]
  reservaciones Reservacion[]
  productos     Sucursal_Producto[]

  @@unique([codigo, nombre])
}

model Mesa {
  id             BigInt             @id @default(autoincrement()) //* Identity
  codigo         String             @unique
  capacidad      Int
  disponibilidad Boolean //* Reservada o libre, entre otras
  estado         Boolean //* Habilitado o deshabilitado
  reservaciones  Reservacion_Mesa[]

  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt
}

model Reservacion {
  id         BigInt             @id @default(autoincrement())
  fecha_hora DateTime           @default(now())
  mesas      Reservacion_Mesa[]
  Sucursal   Sucursal           @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt
  Usuario    Usuario            @relation(fields: [idUsuario], references: [id])
  idUsuario  String
}

model Reservacion_Mesa {
  Mesa          Mesa        @relation(fields: [idMesa], references: [id])
  idMesa        BigInt
  Reservacion   Reservacion @relation(fields: [idReservacion], references: [id])
  idReservacion BigInt
  cantidad      Int

  @@id([idMesa, idReservacion])
}

model Categoria_Producto {
  id          Int        @id
  descripcion String     @unique
  productos   Producto[]
}

model Producto {
  id                 BigInt              @id
  nombre             String
  descripcion        String
  ingredientes       String? //* Opcional
  precio             Decimal
  imagen             String //* agrego esta columna por que es muy importante mostrar que se vende
  estado             Int //* creo que puede tener varios estados... sino cambiar a bool
  Categoria_Producto Categoria_Producto  @relation(fields: [idCategoria], references: [id])
  idCategoria        Int
  detalles           Factura_Detalle[]
  pedidos            Pedido_Producto[]
  sucursales         Sucursal_Producto[]
}

model Sucursal_Producto {
  Producto   Producto @relation(fields: [idProducto], references: [id])
  idProducto BigInt
  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt

  @@id([idProducto, idSucursal])
}

model TipoTarjeta {
  id          Int                  @id
  descripcion String               @unique
  estado      Boolean //* Habilitada / Deshabilitada
  facturas    Factura_Encabezado[]
}

model Factura_Encabezado {
  id             BigInt            @id @default(autoincrement())
  numero_tarjeta String
  fecha          DateTime          @default(now())
  estado         Boolean //* Cancelada / pendiente
  detalles       Factura_Detalle[]

  TipoTarjeta   TipoTarjeta @relation(fields: [idTipoTarjeta], references: [id])
  idTipoTarjeta Int
  Usuario       Usuario     @relation(fields: [idUsuario], references: [id])
  idUsuario     String
}

model Factura_Detalle {
  id            BigInt  @default(autoincrement())
  cantidad      Int
  precio        Decimal
  impuesto      Decimal
  total_detalle Decimal

  Factura_Encabezado   Factura_Encabezado @relation(fields: [idFactura_Encabezado], references: [id])
  idFactura_Encabezado BigInt
  Producto             Producto           @relation(fields: [idProducto], references: [id])
  idProducto           BigInt

  @@id([id, idFactura_Encabezado])
}

//* Pedido = comanda, le cambiamos el nombre

model Pedido {
  id        BigInt            @id @default(autoincrement())
  nombre    String?
  precio    Decimal
  productos Pedido_Producto[]

  Usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario String
}

model Pedido_Producto {
  Pedido     Pedido   @relation(fields: [idPedido], references: [id])
  idPedido   BigInt
  Producto   Producto @relation(fields: [idProducto], references: [id])
  idProducto BigInt
  notas      String

  @@id([idPedido, idProducto])
}
