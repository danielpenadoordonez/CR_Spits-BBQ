// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//? antes de migrate 1. Obvio iniciar el XAMPP con mysql y apache, 2. Estar en este archivo, 3. cd ./server/
//? 4. npx prisma migrate dev --name <name>
//* Prisma versión: 4.3.1 - 5/10

model Perfil {
  id          Int       @id
  descripcion String
  usuarios    Usuario[]
}

model Usuario {
  id               String               @id //* Corresponde  a la cédula
  nombre           String
  apellido1        String
  apellido2        String
  correo           String //* Email
  username         String
  clave            String //* Contraseña, no sé si usará MD5
  telefono         String
  direccion        String? //* Opcional
  reservaciones    Reservacion[]
  facturas         Factura_Encabezado[]
  pedidos          Pedido[]
  Perfil           Perfil               @relation(fields: [idPerfil], references: [id])
  idPerfil         Int
  MeseroOnSucursal MeseroOnSucursal[]

  @@unique([correo, username, telefono])
}

//* Puede ser cambiada, si se emplea el uso de una llave fóranea opcional en usuario con sucursal

// Esta tabla no tiene que llamarse algo asi como MeseroSucursal???
// Es que la tabla usuario tiene todos los datos que puede tener un mesero
// y si hacemos otra tabla llamada Mesero ocuparia de igual manera ID, Nombre,
//apellido 1, apellido 2, etc???
// No se si en el modelo ER es correcto o aceptable tener dos tablas separadas que tengan los
// atributos y ya en las clases emplear herencia o no se. 
// Lo que digo es que se incluya mesero en usuario y hacer una tabla intermedia que conecte la tabla usuario y
// y sucursal. Atte: Isaac

model MeseroOnSucursal {
  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt
  Usuario    Usuario  @relation(fields: [idMesero], references: [id])
  idMesero   String

  @@id([idSucursal, idMesero])
}

model Sucursal {
  id               BigInt              @id //* Nombre de la sursal
  codigo           String //? Pienso que debería tener código
  nombre           String //? Igualmente un nombre
  ubicacion        String
  capacidad        BigInt
  mesas            Mesa[]
  reservaciones    Reservacion[]
  productos        Sucursal_Producto[]
  MeseroOnSucursal MeseroOnSucursal[]

  @@unique([codigo, nombre])
}

model Mesa {
  id            BigInt             @id @default(autoincrement()) //* Identity
  codigo        String             @unique
  capacidad     Int
  estado        Boolean //* Habilitado o deshabilitado
  reservaciones Reservacion_Mesa[]

  Sucursal         Sucursal           @relation(fields: [idSucursal], references: [id])
  idSucursal       BigInt
  EstadoMesa       DisponibilidadMesa @relation(fields: [idDisponibilidad], references: [id])
  idDisponibilidad Int                @default(1)
}

model DisponibilidadMesa {
  id          Int    @id //* 1- Disponible, 2 - Reservada, 3 - ocupada (por gente en el local)...
  descripcion String
  mesas       Mesa[]
}

model Reservacion {
  id         BigInt             @id @default(autoincrement())
  fecha_hora DateTime           @default(now())
  mesas      Reservacion_Mesa[]
  Sucursal   Sucursal           @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt
  Usuario    Usuario            @relation(fields: [idUsuario], references: [id])
  idUsuario  String
}

model Reservacion_Mesa {
  Mesa          Mesa        @relation(fields: [idMesa], references: [id])
  idMesa        BigInt
  Reservacion   Reservacion @relation(fields: [idReservacion], references: [id])
  idReservacion BigInt
  cantidad      Int

  @@id([idMesa, idReservacion])
}

model Categoria_Producto {
  id          Int        @id
  descripcion String     @unique
  productos   Producto[]
}

model Producto {
  id                 BigInt              @id
  nombre             String
  descripcion        String
  ingredientes       String? //* Opcional
  precio             Decimal
  imagen             String //* agrego esta columna por que es muy importante mostrar que se vende
  estado             Int //* creo que puede tener varios estados... sino cambiar a bool
  Categoria_Producto Categoria_Producto  @relation(fields: [idCategoria], references: [id])
  idCategoria        Int
  detalles           Factura_Detalle[]
  pedidos            Pedido_Producto[]
  sucursales         Sucursal_Producto[]
}

model Sucursal_Producto {
  Producto   Producto @relation(fields: [idProducto], references: [id])
  idProducto BigInt
  Sucursal   Sucursal @relation(fields: [idSucursal], references: [id])
  idSucursal BigInt

  @@id([idProducto, idSucursal])
}

model TipoPago {
  id          Int                  @id
  descripcion String
  facturas    Factura_Encabezado[]
}

enum TipoTarjeta {
  VISA
  MASTERCARD
  AMERICAN_EXPRESS
  JCB
  DISCOVER
  NULL //* Sin tipo
}

model Factura_Encabezado {
  id             BigInt            @id @default(autoincrement())
  numero_tarjeta String? //* Opcional 
  tarjeta        TipoTarjeta?      @default(NULL) //* Opcional [PUEDE SER EFECTIVO]
  fecha          DateTime          @default(now())
  estado         Boolean //* Cancelada / pendiente
  detalles       Factura_Detalle[]

  Usuario    Usuario  @relation(fields: [idUsuario], references: [id])
  idUsuario  String
  TipoPago   TipoPago @relation(fields: [idTipoPago], references: [id])
  idTipoPago Int
}

model Factura_Detalle {
  id            BigInt  @default(autoincrement())
  cantidad      Int
  precio        Decimal
  impuesto      Decimal
  total_detalle Decimal

  Factura_Encabezado   Factura_Encabezado @relation(fields: [idFactura_Encabezado], references: [id])
  idFactura_Encabezado BigInt
  Producto             Producto           @relation(fields: [idProducto], references: [id])
  idProducto           BigInt

  @@id([id, idFactura_Encabezado])
}

//* Pedido = comanda, le cambiamos el nombre

model Pedido {
  id        BigInt            @id @default(autoincrement())
  nombre    String?
  precio    Decimal
  productos Pedido_Producto[]

  Usuario   Usuario @relation(fields: [idUsuario], references: [id])
  idUsuario String
}

model Pedido_Producto {
  Pedido     Pedido   @relation(fields: [idPedido], references: [id])
  idPedido   BigInt
  Producto   Producto @relation(fields: [idProducto], references: [id])
  idProducto BigInt
  cantidad   Int      @default(1)
  notas      String

  @@id([idPedido, idProducto])
}
